version: '3.7'

name: tracking-detector-local

services:
  # Infra
  htpasswd-generator:
    image: httpd:alpine
    command: sh -c "htpasswd -bc /etc/nginx/.htpasswd $$USER $$PASS"
    environment:
      - USER=${ADMIN_USERNAME}
      - PASS=${ADMIN_PASSWORD}
    volumes:
      - ./infra/api-gateway/:/etc/nginx/

  api-gateway:
    restart: unless-stopped
    image: nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./infra/api-gateway/:/etc/nginx:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    environment:
      DOMAIN: ${DOMAIN}
    depends_on:
      - mongo-express
      - export
      - minio
      - requests
      - htpasswd-generator
      - certbot
    networks:
      - app-network
  certbot:
    image: alpine:3.12
    command: /bin/sh -c "mkdir -p /etc/letsencrypt/live/${DOMAIN} && apk add openssl && openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/letsencrypt/live/${DOMAIN}/privkey.pem -out /etc/letsencrypt/live/${DOMAIN}/fullchain.pem -subj '/CN=${DOMAIN}'"
    environment:
      - DOMAIN=${DOMAIN}
    volumes: 
      - ./certbot/conf:/etc/letsencrypt
  loki:
    restart: unless-stopped
    image: grafana/loki:2.1.0
    volumes:
      - loki_data:/loki
      - ./infra/loki/loki.yaml:/etc/loki/loki-config.yaml
    command: -config.file="etc/loki/loki-config.yaml"
    networks:
      - app-network
    depends_on:
      - create-logging-buckets
  promtail:
    restart: unless-stopped
    image: grafana/promtail:2.6.1
    volumes:
      - ./infra/promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers
    networks:
      - app-network
  grafana:
    restart: unless-stopped
    image: grafana/grafana:7.3.7
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./infra/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - app-network
    depends_on:
      - loki
  minio:
    restart: unless-stopped
    image: minio/minio
    container_name: minio
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_PRIVATE_KEY}
    command: server ~ --address ':9000' --console-address ':9001'
    networks:
      - app-network
  create-logging-buckets:
    image: minio/mc
    networks:
      - app-network
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_PRIVATE_KEY=${MINIO_PRIVATE_KEY}
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_PRIVATE_KEY};
      /usr/bin/mc rm -r --force myminio/loki;
      /usr/bin/mc mb myminio/loki;
      /usr/bin/mc policy set public myminio/loki;
      exit 0;
      "
  mongo-express:
    restart: unless-stopped
    image: mongo-express:latest
    environment:
      - ME_CONFIG_MONGODB_URL=mongodb://db:27017/tracking-detector
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=false
      - ME_CONFIG_SITE_BASEURL=/mongo
    depends_on:
      - db
    networks:
      - app-network
  db:
    image: mongo:latest
    restart: unless-stopped
    container_name: db
    environment:
      - MONGO_INITDB_DATABASE=tracking-detector
    volumes:
      - mongo_storage:/data/db
    networks:
      - app-network
  # Serverless Functions
  requests:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./go/functions/requests/Dockerfile
    environment:
      - MONGO_URI=${MONGO_URI}
      - USER_COLLECTION=${USER_COLLECTION}
      - REQUEST_COLLECTION=${REQUEST_COLLECTION}
      - TRAINING_RUNS_COLLECTION=${TRAINING_RUNS_COLLECTION}
      - MINIO_URI=${MINIO_URI}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_PRIVATE_KEY=${MINIO_PRIVATE_KEY}
      - EXPORT_BUCKET_NAME=${EXPORT_BUCKET_NAME}
      - MODEL_BUCKET_NAME=${MODEL_BUCKET_NAME}
      - ADMIN_API_KEY=${ADMIN_API_KEY}
    depends_on:
      - minio
      - db
    networks:
      - app-network
  export:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./go/functions/export/Dockerfile
    environment:
      - MONGO_URI=${MONGO_URI}
      - USER_COLLECTION=${USER_COLLECTION}
      - REQUEST_COLLECTION=${REQUEST_COLLECTION}
      - TRAINING_RUNS_COLLECTION=${TRAINING_RUNS_COLLECTION}
      - MINIO_URI=${MINIO_URI}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_PRIVATE_KEY=${MINIO_PRIVATE_KEY}
      - EXPORT_BUCKET_NAME=${EXPORT_BUCKET_NAME}
      - MODEL_BUCKET_NAME=${MODEL_BUCKET_NAME}
      - ADMIN_API_KEY=${ADMIN_API_KEY}
    depends_on:
      - minio
      - db
    networks:
      - app-network
  download:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./go/functions/download/Dockerfile
    environment:
      - MONGO_URI=${MONGO_URI}
      - USER_COLLECTION=${USER_COLLECTION}
      - REQUEST_COLLECTION=${REQUEST_COLLECTION}
      - TRAINING_RUNS_COLLECTION=${TRAINING_RUNS_COLLECTION}
      - MINIO_URI=${MINIO_URI}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_PRIVATE_KEY=${MINIO_PRIVATE_KEY}
      - EXPORT_BUCKET_NAME=${EXPORT_BUCKET_NAME}
      - MODEL_BUCKET_NAME=${MODEL_BUCKET_NAME}
      - ADMIN_API_KEY=${ADMIN_API_KEY}
    depends_on:
      - minio
      - db
    networks:
      - app-network
  auth:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./go/functions/auth/Dockerfile
    environment:
      - MONGO_URI=${MONGO_URI}
      - USER_COLLECTION=${USER_COLLECTION}
      - REQUEST_COLLECTION=${REQUEST_COLLECTION}
      - TRAINING_RUNS_COLLECTION=${TRAINING_RUNS_COLLECTION}
      - MINIO_URI=${MINIO_URI}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_PRIVATE_KEY=${MINIO_PRIVATE_KEY}
      - EXPORT_BUCKET_NAME=${EXPORT_BUCKET_NAME}
      - MODEL_BUCKET_NAME=${MODEL_BUCKET_NAME}
      - ADMIN_API_KEY=${ADMIN_API_KEY}
    depends_on:
      - minio
      - db
    networks:
      - app-network
  users:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./go/functions/users/Dockerfile
    environment:
      - MONGO_URI=${MONGO_URI}
      - USER_COLLECTION=${USER_COLLECTION}
      - REQUEST_COLLECTION=${REQUEST_COLLECTION}
      - TRAINING_RUNS_COLLECTION=${TRAINING_RUNS_COLLECTION}
      - MINIO_URI=${MINIO_URI}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_PRIVATE_KEY=${MINIO_PRIVATE_KEY}
      - EXPORT_BUCKET_NAME=${EXPORT_BUCKET_NAME}
      - MODEL_BUCKET_NAME=${MODEL_BUCKET_NAME}
      - ADMIN_API_KEY=${ADMIN_API_KEY}
    depends_on:
      - minio
      - db
    networks:
      - app-network
  training:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./python/Dockerfile
    environment:
      - MONGO_URI=${MONGO_URI}
      - USER_COLLECTION=${USER_COLLECTION}
      - REQUEST_COLLECTION=${REQUEST_COLLECTION}
      - TRAINING_RUNS_COLLECTION=${TRAINING_RUNS_COLLECTION}
      - MINIO_URI=${MINIO_URI}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_PRIVATE_KEY=${MINIO_PRIVATE_KEY}
      - EXPORT_BUCKET_NAME=${EXPORT_BUCKET_NAME}
      - MODEL_BUCKET_NAME=${MODEL_BUCKET_NAME}
      - ADMIN_API_KEY=${ADMIN_API_KEY}
    depends_on:
      - minio
      - db
    networks:
      - app-network
  training-runs:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./go/functions/training-runs/Dockerfile
    environment:
      - MONGO_URI=${MONGO_URI}
      - USER_COLLECTION=${USER_COLLECTION}
      - REQUEST_COLLECTION=${REQUEST_COLLECTION}
      - TRAINING_RUNS_COLLECTION=${TRAINING_RUNS_COLLECTION}
      - MINIO_URI=${MINIO_URI}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_PRIVATE_KEY=${MINIO_PRIVATE_KEY}
      - EXPORT_BUCKET_NAME=${EXPORT_BUCKET_NAME}
      - MODEL_BUCKET_NAME=${MODEL_BUCKET_NAME}
      - ADMIN_API_KEY=${ADMIN_API_KEY}
    depends_on:
      - minio
      - db
    networks:
      - app-network
  front-end:
    restart: unless-stopped
    build: ./td-fe
    environment:
      - MONGO_URI=${MONGO_URI}
      - USER_COLLECTION=${USER_COLLECTION}
      - REQUEST_COLLECTION=${REQUEST_COLLECTION}
      - TRAINING_RUNS_COLLECTION=${TRAINING_RUNS_COLLECTION}
      - MINIO_URI=${MINIO_URI}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_PRIVATE_KEY=${MINIO_PRIVATE_KEY}
      - EXPORT_BUCKET_NAME=${EXPORT_BUCKET_NAME}
      - MODEL_BUCKET_NAME=${MODEL_BUCKET_NAME}
      - NUXT_PUBLIC_API_BASE=${ADMIN_API_KEY}
    networks:
      - app-network

networks:
  app-network:


volumes:
  minio_data: {}
  loki_data: {}
  grafana_data: {}
  data: {}
  mongo_storage: {}
